{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Title","props","className","this","title","smallTitle","React","Component","Middle","MenuBackground","FindUs","BigContainer","state","display","toggleDisplayLeft","bind","toggleDisplayRight","setState","onClick","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gQAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICXAC,E,YACJ,WAAYC,GAAQ,qEACZA,I,sEAGN,OACE,yBAAKC,UAAU,SACb,uBAAGA,UAAU,aAAaC,KAAKF,MAAMG,OACrC,uBAAGF,UAAU,eAAeC,KAAKF,MAAMI,iB,GAR3BC,IAAMC,WAcpBC,E,iLAEF,OAAO,yBAAKN,UAAU,e,GAFLI,IAAMC,WAOrBE,E,iLAEF,OACE,yBAAKP,UAAU,mBACb,yBAAKA,UAAU,QACb,0BAAMA,UAAU,aAAhB,SACA,0BAAMA,UAAU,cAAhB,WACA,0BAAMA,UAAU,aAAhB,SACA,0BAAMA,UAAU,cAAhB,WACA,0BAAMA,UAAU,aAAhB,UACA,0BAAMA,UAAU,cAAhB,WACA,0BAAMA,UAAU,aAAhB,SACA,0BAAMA,UAAU,cAAhB,WACA,0BAAMA,UAAU,aAAhB,YACA,0BAAMA,UAAU,cAAhB,WACA,0BAAMA,UAAU,aAAhB,SACA,0BAAMA,UAAU,cAAhB,WACA,0BAAMA,UAAU,aAAhB,QACA,0BAAMA,UAAU,cAAhB,iB,GAlBmBI,IAAMC,WAyB7BG,E,iLAEF,OACE,yBAAKR,UAAU,WACb,uBAAGA,UAAU,WAAb,gDAEA,yBAAKA,UAAU,QAEf,uBAAGA,UAAU,SAAb,0C,GARaI,IAAMC,WAcrBI,E,YACJ,WAAYV,GAAQ,IAAD,8BACjB,4CAAMA,KACDW,MAAQ,CACXC,QAAS,QAGX,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,mBAAqB,EAAKA,mBAAmBD,KAAxB,gBAPT,E,iFAWU,SAAvBZ,KAAKS,MAAMC,SAA6C,QAAvBV,KAAKS,MAAMC,QAC9CV,KAAKc,SAAS,CACZJ,QAAS,SAEqB,SAAvBV,KAAKS,MAAMC,SACpBV,KAAKc,SAAS,CACZJ,QAAS,W,2CAMc,SAAvBV,KAAKS,MAAMC,SAA6C,SAAvBV,KAAKS,MAAMC,QAC9CV,KAAKc,SAAS,CACZJ,QAAS,QAEqB,QAAvBV,KAAKS,MAAMC,SACpBV,KAAKc,SAAS,CACZJ,QAAS,W,+BAMb,MAA2B,SAAvBV,KAAKS,MAAMC,QAEX,yBAAKX,UAAU,iBACb,kBAAC,EAAD,CAAOE,MAAM,WAAWC,WAAW,8CACnC,kBAAC,EAAD,MAEA,yBAAKH,UAAU,SACb,0BAAMA,UAAU,YAAYgB,QAASf,KAAKW,mBAA1C,QAGA,0BAAMZ,UAAU,aAAagB,QAASf,KAAKa,oBAA3C,aAM0B,SAAvBb,KAAKS,MAAMC,QAElB,yBAAKX,UAAU,iBACb,kBAAC,EAAD,MAEA,yBAAKA,UAAU,SACb,0BAAMA,UAAU,YAAYgB,QAASf,KAAKW,mBAA1C,QAGA,0BAAMZ,UAAU,aAAagB,QAASf,KAAKa,oBAA3C,aAM0B,QAAvBb,KAAKS,MAAMC,QAElB,yBAAKX,UAAU,iBACb,kBAAC,EAAD,MAEA,yBAAKA,UAAU,SACb,0BAAMA,UAAU,YAAYgB,QAASf,KAAKW,mBAA1C,QAGA,0BAAMZ,UAAU,aAAagB,QAASf,KAAKa,oBAA3C,eATD,M,GAnEgBV,IAAMC,WAsFjCY,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,SDxBpD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.17202ab7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\n//HOME\nclass Title extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div className=\"title\">\n        <p className=\"big-title\">{this.props.title}</p>\n        <p className=\"small-title\">{this.props.smallTitle}</p>\n      </div>\n    );\n  }\n}\n\nclass Middle extends React.Component {\n  render() {\n    return <div className=\"middle\"></div>;\n  }\n}\n\n//MENU\nclass MenuBackground extends React.Component {\n  render() {\n    return (\n      <div className=\"menu-background\">\n        <div className=\"menu\">\n          <span className=\"menu-item\">Rakia</span>\n          <span className=\"menu-price\">1.80 lv</span>\n          <span className=\"menu-item\">Vodka</span>\n          <span className=\"menu-price\">1.80 lv</span>\n          <span className=\"menu-item\">Whisky</span>\n          <span className=\"menu-price\">2.00 lv</span>\n          <span className=\"menu-item\">Chips</span>\n          <span className=\"menu-price\">1.20 lv</span>\n          <span className=\"menu-item\">Meatball</span>\n          <span className=\"menu-price\">0.80 lv</span>\n          <span className=\"menu-item\">Sprat</span>\n          <span className=\"menu-price\">1.60 lv</span>\n          <span className=\"menu-item\">Carp</span>\n          <span className=\"menu-price\">3.00 lv</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass FindUs extends React.Component {\n  render() {\n    return (\n      <div className=\"find-us\">\n        <p className=\"address\"> ul. \"Mladezhka\" 32А, Plovdiv, Bulgaria</p>\n\n        <div className=\"map\"></div>\n\n        <p className=\"hours\">Opening Hours: 9:30am–9:30pm</p>\n      </div>\n    );\n  }\n}\n\nclass BigContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: 'home'\n    };\n\n    this.toggleDisplayLeft = this.toggleDisplayLeft.bind(this);\n    this.toggleDisplayRight = this.toggleDisplayRight.bind(this);\n  }\n\n  toggleDisplayLeft() {\n    if (this.state.display === 'home' || this.state.display === 'map') {\n      this.setState({\n        display: 'menu'\n      });\n    } else if (this.state.display === 'menu') {\n      this.setState({\n        display: 'home'\n      });\n    }\n  }\n\n  toggleDisplayRight() {\n    if (this.state.display === 'home' || this.state.display === 'menu') {\n      this.setState({\n        display: 'map'\n      });\n    } else if (this.state.display === 'map') {\n      this.setState({\n        display: 'home'\n      });\n    }\n  }\n\n  render() {\n    if (this.state.display === 'home') {\n      return (\n        <div className=\"big-container\">\n          <Title title=\"Vodolaza\" smallTitle=\"The best Pub & Fish Restaurant in Plovdiv\" />\n          <Middle />\n\n          <div className=\"icons\">\n            <span className=\"icon-left\" onClick={this.toggleDisplayLeft}>\n              Menu\n            </span>\n            <span className=\"icon-right\" onClick={this.toggleDisplayRight}>\n              Find us\n            </span>\n          </div>\n        </div>\n      );\n    } else if (this.state.display === 'menu') {\n      return (\n        <div className=\"big-container\">\n          <MenuBackground />\n\n          <div className=\"icons\">\n            <span className=\"icon-left\" onClick={this.toggleDisplayLeft}>\n              Home\n            </span>\n            <span className=\"icon-right\" onClick={this.toggleDisplayRight}>\n              Find us\n            </span>\n          </div>\n        </div>\n      );\n    } else if (this.state.display === 'map') {\n      return (\n        <div className=\"big-container\">\n          <FindUs />\n\n          <div className=\"icons\">\n            <span className=\"icon-left\" onClick={this.toggleDisplayLeft}>\n              Menu\n            </span>\n            <span className=\"icon-right\" onClick={this.toggleDisplayRight}>\n              Home\n            </span>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nReactDOM.render(<BigContainer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}